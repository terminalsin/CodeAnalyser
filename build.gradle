plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.codeanalyser'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    group = 'com.codeanalyser'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '17'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        set('springAiVersion', "0.8.1")
        set('springCloudVersion', "2023.0.1")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        // Devtools
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Manifold
        implementation 'systems.manifold:manifold-ext-rt:2024.1.14'
        annotationProcessor group: 'systems.manifold', name: 'manifold-ext', version: '2024.1.14'
        testAnnotationProcessor group: 'systems.manifold', name: 'manifold-ext', version: '2024.1.14'

        // Spring
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    bootJar {
        enabled = true
    }

    bootBuildImage {
        imageName = 'codeanalyser/' + project.name
        enabled = true
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    if (JavaVersion.current() != JavaVersion.VERSION_1_8 &&
            sourceSets.main.allJava.files.any {it.name == "module-info.java"}) {
        tasks.withType(JavaCompile) {
            // if you DO define a module-info.java file:
            options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
        }
    } else {
        tasks.withType(JavaCompile) {
            // If you DO NOT define a module-info.java file:
            options.compilerArgs += ['-Xplugin:Manifold']
        }
    }
}

tasks.register('buildFrontend') {
    doLast {
        exec {
            workingDir 'code-analyser-frontend'
            commandLine 'docker', 'build', '-t', 'codeanalyser/frontend', '.'
        }
    }
}

tasks.register('buildLlama') {
    doLast {
        exec {
            workingDir 'code-analyser-ollama'
            commandLine 'docker', 'build', '-t', 'codeanalyser/ollama', '.'
        }
    }
}


tasks.register('oneClickDeploy') {
    dependsOn subprojects.bootBuildImage
    dependsOn 'buildFrontend'
}


bootJar {
    enabled = false
}

bootBuildImage{
    enabled = false
}